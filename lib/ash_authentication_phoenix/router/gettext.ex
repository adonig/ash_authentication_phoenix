defmodule AshAuthentication.Phoenix.Router.Gettext do
  # When using a `gettext_backend`, we generate a function in the caller's router module, involving the
  # path as unique id for the function name
  @doc false
  def generate_fn(nil, _id), do: ""

  def generate_fn({module, domain}, id) do
    if Code.ensure_loaded?(Gettext) do
      quote do
        # sobelow_skip ["DOS.BinToAtom"] - based on auth route
        def unquote(:"__translate#{id}")(msgid, bindings) do
          Gettext.dgettext(unquote(module), unquote(domain), msgid, bindings)
        end
      end
    else
      raise "gettext_backend: Gettext is not available"
    end
  end

  @doc false
  def maybe_generate_fn_pointer(nil, nil, _router_module, _id), do: nil

  # Prefer gettext_fn over gettext_backend
  def maybe_generate_fn_pointer(gettext_fn, _ignore, _router_module, _id)
      when is_tuple(gettext_fn),
      do: gettext_fn

  # Point to the "translate" function generated by `generate_gettext_fn`
  def maybe_generate_fn_pointer(_gettext_fn, {_module, _domain}, router_module, id),
    # sobelow_skip ["DOS.BinToAtom"] - based on auth route
    do: {router_module, :"__translate#{id}"}

  def maybe_generate_fn_pointer(_gettext_fn, invalid, _router_module, _id) do
    raise ArgumentError,
          "gettext_backend: #{inspect(invalid)} is invalid - specify " <>
            "`{module :: module, domain :: String.t()}`"
  end
end
